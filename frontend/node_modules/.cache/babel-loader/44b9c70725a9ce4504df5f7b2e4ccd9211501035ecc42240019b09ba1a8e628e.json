{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = () => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n\n  // ‚úÖ Fetch link token from backend on component mount\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        setLinkToken(response.data.link_token);\n        console.log(\"‚úÖ Link Token Fetched:\", response.data.link_token);\n      } catch (error) {\n        console.error(\"‚ùå Error creating link token:\", error);\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // ‚úÖ Initialize Plaid Link when linkToken is available\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        setAccessToken(response.data.access_token);\n        console.log(\"‚úÖ Access Token Received:\", response.data.access_token);\n      } catch (error) {\n        console.error(\"‚ùå Error exchanging token:\", error);\n      }\n    }\n  });\n\n  // ‚úÖ Fetch Bank Accounts & Transactions when accessToken is received\n  useEffect(() => {\n    if (!accessToken) return;\n    const fetchAccounts = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/accounts\");\n        console.log(\"‚úÖ Accounts Response:\", response.data);\n        setAccounts(response.data.accounts);\n        setTransactions(response.data.transactions);\n      } catch (error) {\n        console.error(\"‚ùå Error fetching account details:\", error);\n      }\n    };\n    fetchAccounts();\n  }, [accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: open,\n      disabled: !ready,\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Bank Accounts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), accounts.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: account.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), \" - $\", account.balances.current.toFixed(2)]\n      }, account.account_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No accounts linked yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recent Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), transactions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map(tx => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [tx.date, \" - \", tx.name, \": $\", tx.amount.toFixed(2)]\n      }, tx.transaction_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transactions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"kPIf4T7mxqiJww1ZZoJfGmI0rrs=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","jsxDEV","_jsxDEV","PlaidIntegration","_s","linkToken","setLinkToken","accessToken","setAccessToken","accounts","setAccounts","transactions","setTransactions","fetchLinkToken","response","post","data","link_token","console","log","error","open","ready","token","onSuccess","publicToken","public_token","access_token","fetchAccounts","get","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","length","map","account","name","balances","current","toFixed","account_id","tx","date","amount","transaction_id","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\n\r\nconst PlaidIntegration = () => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  // ‚úÖ Fetch link token from backend on component mount\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        setLinkToken(response.data.link_token);\r\n        console.log(\"‚úÖ Link Token Fetched:\", response.data.link_token);\r\n      } catch (error) {\r\n        console.error(\"‚ùå Error creating link token:\", error);\r\n      }\r\n    };\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // ‚úÖ Initialize Plaid Link when linkToken is available\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        setAccessToken(response.data.access_token);\r\n        console.log(\"‚úÖ Access Token Received:\", response.data.access_token);\r\n      } catch (error) {\r\n        console.error(\"‚ùå Error exchanging token:\", error);\r\n      }\r\n    },\r\n  });\r\n\r\n  // ‚úÖ Fetch Bank Accounts & Transactions when accessToken is received\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n\r\n    const fetchAccounts = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/accounts\");\r\n        console.log(\"‚úÖ Accounts Response:\", response.data);\r\n        setAccounts(response.data.accounts);\r\n        setTransactions(response.data.transactions);\r\n      } catch (error) {\r\n        console.error(\"‚ùå Error fetching account details:\", error);\r\n      }\r\n    };\r\n\r\n    fetchAccounts();\r\n  }, [accessToken]);\r\n\r\n  return (\r\n    <div>\r\n\r\n      {/* üîπ Connect Bank Button */}\r\n      <button onClick={open} disabled={!ready}>\r\n        Connect Bank Account\r\n      </button>\r\n\r\n      {/* üîπ Show Bank Accounts */}\r\n      <h2>Bank Accounts</h2>\r\n      {accounts.length > 0 ? (\r\n        <ul>\r\n          {accounts.map((account) => (\r\n            <li key={account.account_id}>\r\n              <strong>{account.name}</strong> - ${account.balances.current.toFixed(2)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No accounts linked yet.</p>\r\n      )}\r\n\r\n      {/* üîπ Show Transactions */}\r\n      <h2>Recent Transactions</h2>\r\n      {transactions.length > 0 ? (\r\n        <ul>\r\n          {transactions.map((tx) => (\r\n            <li key={tx.transaction_id}>\r\n              {tx.date} - {tx.name}: ${tx.amount.toFixed(2)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No transactions found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}