{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = ({\n  setAccessToken\n}) => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch link token from backend on component mount\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        setLinkToken(response.data.link_token);\n      } catch (error) {\n        console.error(\"Error creating link token:\", error);\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // Initialize Plaid Link when linkToken is available\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        const accessToken = response.data.access_token;\n        setAccessToken(accessToken);\n        fetchTransactions(accessToken);\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n      }\n    }\n  });\n\n  // Fetch transactions from backend\n  const fetchTransactions = async token => {\n    try {\n      setLoading(true);\n      const response = await axios.post(\"http://localhost:5000/api/transactions\", {\n        access_token: token\n      });\n      setTransactions(response.data.transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format transactions by month\n  const groupTransactionsByMonth = () => {\n    const grouped = {};\n    transactions.forEach(tx => {\n      const date = new Date(tx.date);\n      const monthYear = date.toLocaleString(\"default\", {\n        month: \"short\",\n        year: \"numeric\"\n      });\n      if (!grouped[monthYear]) grouped[monthYear] = [];\n      grouped[monthYear].push(tx);\n    });\n    return grouped;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-btn\",\n      onClick: open,\n      disabled: !linkToken,\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-text\",\n      children: \"Loading transactions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }, this), transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-table\",\n      children: Object.entries(groupTransactionsByMonth()).map(([month, trans], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"month-header\",\n          children: month\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"styled-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Bank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: trans.map((t, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: t.bank_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: t.merchant_name || \"Unknown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"$\", t.amount.toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(t.date).getDate()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"XQ/UvjB9E12COuFOMn9eM3oPeho=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","jsxDEV","_jsxDEV","PlaidIntegration","setAccessToken","_s","linkToken","setLinkToken","transactions","setTransactions","loading","setLoading","fetchLinkToken","response","post","data","link_token","error","console","open","ready","token","onSuccess","publicToken","public_token","accessToken","access_token","fetchTransactions","groupTransactionsByMonth","grouped","forEach","tx","date","Date","monthYear","toLocaleString","month","year","push","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","length","Object","entries","map","trans","index","t","idx","bank_name","merchant_name","amount","toFixed","getDate","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\n\r\nconst PlaidIntegration = ({ setAccessToken }) => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch link token from backend on component mount\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        setLinkToken(response.data.link_token);\r\n      } catch (error) {\r\n        console.error(\"Error creating link token:\", error);\r\n      }\r\n    };\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // Initialize Plaid Link when linkToken is available\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        const accessToken = response.data.access_token;\r\n        setAccessToken(accessToken);\r\n        fetchTransactions(accessToken);\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Fetch transactions from backend\r\n  const fetchTransactions = async (token) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\"http://localhost:5000/api/transactions\", { access_token: token });\r\n      setTransactions(response.data.transactions);\r\n    } catch (error) {\r\n      console.error(\"Error fetching transactions:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Format transactions by month\r\n  const groupTransactionsByMonth = () => {\r\n    const grouped = {};\r\n    transactions.forEach((tx) => {\r\n      const date = new Date(tx.date);\r\n      const monthYear = date.toLocaleString(\"default\", { month: \"short\", year: \"numeric\" });\r\n\r\n      if (!grouped[monthYear]) grouped[monthYear] = [];\r\n      grouped[monthYear].push(tx);\r\n    });\r\n\r\n    return grouped;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n  <button className=\"connect-btn\" onClick={open} disabled={!linkToken}>\r\n    Connect Bank Account\r\n  </button>\r\n\r\n  {loading && <p className=\"loading-text\">Loading transactions...</p>}\r\n\r\n  {transactions.length > 0 && (\r\n    <div className=\"transactions-table\">\r\n      {Object.entries(groupTransactionsByMonth()).map(([month, trans], index) => (\r\n        <div key={index} className=\"month-section\">\r\n          <h2 className=\"month-header\">{month}</h2>\r\n          <table className=\"styled-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Bank</th>\r\n                <th>Name</th>\r\n                <th>Price</th>\r\n                <th>Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {trans.map((t, idx) => (\r\n                <tr key={idx}>\r\n                  <td>{t.bank_name}</td>\r\n                  <td>{t.merchant_name || \"Unknown\"}</td>\r\n                  <td>${t.amount.toFixed(2)}</td>\r\n                  <td>{new Date(t.date).getDate()}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )}\r\n</div>\r\n\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}