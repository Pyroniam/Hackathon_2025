{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = ({\n  setAccessToken\n}) => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [plaidOpen, setPlaidOpen] = useState(false); // Tracks if Plaid Link should open\n\n  // Fetch link token from backend on component mount\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        setLinkToken(response.data.link_token);\n      } catch (error) {\n        console.error(\"Error creating link token:\", error);\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // Initialize Plaid Link only when linkToken is available\n  const {\n    open,\n    ready\n  } = usePlaidLink(linkToken ? {\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        setAccessToken(response.data.access_token);\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n      }\n    }\n  } : {} // Empty config to prevent errors when linkToken is null\n  );\n\n  // Open Plaid Link when plaidOpen is true and the link is ready\n  useEffect(() => {\n    if (plaidOpen && ready) {\n      open();\n      setPlaidOpen(false); // Reset after opening\n    }\n  }, [plaidOpen, ready, open]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPlaidOpen(true),\n      disabled: !linkToken,\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"c88YYvtXjnXuTJiPQHTfPqkN+Pc=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","jsxDEV","_jsxDEV","PlaidIntegration","setAccessToken","_s","linkToken","setLinkToken","plaidOpen","setPlaidOpen","fetchLinkToken","response","post","data","link_token","error","console","open","ready","token","onSuccess","publicToken","public_token","access_token","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\n\r\nconst PlaidIntegration = ({ setAccessToken }) => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [plaidOpen, setPlaidOpen] = useState(false); // Tracks if Plaid Link should open\r\n\r\n  // Fetch link token from backend on component mount\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        setLinkToken(response.data.link_token);\r\n      } catch (error) {\r\n        console.error(\"Error creating link token:\", error);\r\n      }\r\n    };\r\n\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // Initialize Plaid Link only when linkToken is available\r\n  const { open, ready } = usePlaidLink(\r\n    linkToken\r\n      ? {\r\n          token: linkToken,\r\n          onSuccess: async (publicToken) => {\r\n            try {\r\n              const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\r\n                public_token: publicToken,\r\n              });\r\n              setAccessToken(response.data.access_token);\r\n            } catch (error) {\r\n              console.error(\"Error exchanging token:\", error);\r\n            }\r\n          },\r\n        }\r\n      : {} // Empty config to prevent errors when linkToken is null\r\n  );\r\n\r\n  // Open Plaid Link when plaidOpen is true and the link is ready\r\n  useEffect(() => {\r\n    if (plaidOpen && ready) {\r\n      open();\r\n      setPlaidOpen(false); // Reset after opening\r\n    }\r\n  }, [plaidOpen, ready, open]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setPlaidOpen(true)} disabled={!linkToken}>\r\n        Connect Bank Account\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,6CAA6C,CAAC;QAChFL,YAAY,CAACI,QAAQ,CAACE,IAAI,CAACC,UAAU,CAAC;MACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDL,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM;IAAEO,IAAI;IAAEC;EAAM,CAAC,GAAGnB,YAAY,CAClCO,SAAS,GACL;IACEa,KAAK,EAAEb,SAAS;IAChBc,SAAS,EAAE,MAAOC,WAAW,IAAK;MAChC,IAAI;QACF,MAAMV,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,iDAAiD,EAAE;UACnFU,YAAY,EAAED;QAChB,CAAC,CAAC;QACFjB,cAAc,CAACO,QAAQ,CAACE,IAAI,CAACU,YAAY,CAAC;MAC5C,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF,CAAC,GACD,CAAC,CAAC,CAAC;EACT,CAAC;;EAED;EACAjB,SAAS,CAAC,MAAM;IACd,IAAIU,SAAS,IAAIU,KAAK,EAAE;MACtBD,IAAI,CAAC,CAAC;MACNR,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC,EAAE,CAACD,SAAS,EAAEU,KAAK,EAAED,IAAI,CAAC,CAAC;EAE5B,oBACEf,OAAA;IAAAsB,QAAA,eACEtB,OAAA;MAAQuB,OAAO,EAAEA,CAAA,KAAMhB,YAAY,CAAC,IAAI,CAAE;MAACiB,QAAQ,EAAE,CAACpB,SAAU;MAAAkB,QAAA,EAAC;IAEjE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACzB,EAAA,CApDIF,gBAAgB;EAAA,QAmBIJ,YAAY;AAAA;AAAAgC,EAAA,GAnBhC5B,gBAAgB;AAsDtB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}