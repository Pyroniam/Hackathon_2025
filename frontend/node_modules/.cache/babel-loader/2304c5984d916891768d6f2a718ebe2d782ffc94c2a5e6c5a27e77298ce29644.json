{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { Button, CircularProgress, Container, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Accordion, AccordionSummary, AccordionDetails, Card, CardContent, List, ListItem, ListItemText } from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = () => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [income, setIncome] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch link token from backend\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        setLinkToken(response.data.link_token);\n      } catch (error) {\n        console.error(\"Error creating link token:\", error);\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // Initialize Plaid Link\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        setLoading(true);\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        setAccessToken(response.data.access_token);\n        fetchBankData(response.data.access_token);\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  // Fetch accounts, transactions, and income data\n  const fetchBankData = async token => {\n    try {\n      var _accountResponse$data, _transactionResponse$, _incomeResponse$data$;\n      setLoading(true);\n\n      // Fetch Accounts\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", {\n        access_token: token\n      });\n      const displayedAccounts = (_accountResponse$data = accountResponse.data.accounts) === null || _accountResponse$data === void 0 ? void 0 : _accountResponse$data.map(account => {\n        var _account$balances;\n        return {\n          name: account.name,\n          type: account.type,\n          balance: (_account$balances = account.balances) === null || _account$balances === void 0 ? void 0 : _account$balances.current\n        };\n      });\n      console.log(JSON.stringify({\n        event: \"Accounts Fetched\",\n        accounts: displayedAccounts\n      }));\n      setAccounts(displayedAccounts || []);\n\n      // Fetch Transactions\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", {\n        access_token: token\n      });\n      const displayedTransactions = (_transactionResponse$ = transactionResponse.data.transactions) === null || _transactionResponse$ === void 0 ? void 0 : _transactionResponse$.map(transaction => ({\n        name: transaction.name,\n        amount: transaction.amount,\n        date: transaction.date\n      }));\n      console.log(JSON.stringify({\n        event: \"Transactions Fetched\",\n        transactions: displayedTransactions\n      }));\n      setTransactions(displayedTransactions || []);\n\n      // Fetch Income\n      const incomeResponse = await axios.post(\"http://localhost:5000/api/income\", {\n        access_token: token\n      });\n      const displayedIncome = (_incomeResponse$data$ = incomeResponse.data.income) === null || _incomeResponse$data$ === void 0 ? void 0 : _incomeResponse$data$.map(incomeSource => ({\n        source: incomeSource.source,\n        avgMonthlyIncome: incomeSource.avgMonthlyIncome\n      }));\n      console.log(JSON.stringify({\n        event: \"Income Fetched\",\n        income: displayedIncome\n      }));\n      setIncome(displayedIncome || []);\n    } catch (error) {\n      console.error(\"❌ Error fetching financial data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper function to group transactions by month and calculate total spending\n  const groupTransactionsByMonth = () => {\n    const grouped = {};\n    transactions.forEach(transaction => {\n      if (!transaction.date || !transaction.amount) return;\n      const date = new Date(transaction.date);\n      if (isNaN(date)) return;\n      const monthYear = date.toLocaleString(\"default\", {\n        month: \"short\",\n        year: \"numeric\"\n      });\n      if (!grouped[monthYear]) {\n        grouped[monthYear] = {\n          transactions: [],\n          total: 0\n        };\n      }\n      grouped[monthYear].transactions.push(transaction);\n      grouped[monthYear].total += Number(transaction.amount);\n    });\n    return grouped;\n  };\n  const groupedTransactions = groupTransactionsByMonth();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Finance Advisor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: open,\n      disabled: !ready || !linkToken,\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }, this), income.length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: \"20px\",\n        padding: \"20px\",\n        backgroundColor: \"#e8f5e9\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          style: {\n            fontWeight: \"bold\",\n            color: \"#2E7D32\"\n          },\n          children: \"Estimated Monthly Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: income.map((incomeSource, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: incomeSource.source || \"Unknown Source\",\n              secondary: `Estimated Income: $${(incomeSource.avgMonthlyIncome || 0).toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), Object.entries(groupedTransactions).map(([month, data]) => /*#__PURE__*/_jsxDEV(Accordion, {\n      style: {\n        marginTop: \"10px\",\n        backgroundColor: \"#2e2e2e\",\n        color: \"white\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n          style: {\n            color: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 41\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            fontWeight: \"bold\",\n            width: \"100%\"\n          },\n          children: [month, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              float: \"right\"\n            },\n            children: [\"$\", data.total.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.name || \"Unknown Transaction\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: [\"$\", (transaction.amount || 0).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.date ? new Date(transaction.date).toDateString() : \"Invalid Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, month, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"+hH7PtKbHh/ZZjYoj52mGd8X9zY=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","Button","CircularProgress","Container","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Accordion","AccordionSummary","AccordionDetails","Card","CardContent","List","ListItem","ListItemText","ExpandMoreIcon","jsxDEV","_jsxDEV","PlaidIntegration","_s","linkToken","setLinkToken","accessToken","setAccessToken","accounts","setAccounts","transactions","setTransactions","income","setIncome","loading","setLoading","fetchLinkToken","response","post","data","link_token","error","console","open","ready","token","onSuccess","publicToken","public_token","access_token","fetchBankData","_accountResponse$data","_transactionResponse$","_incomeResponse$data$","accountResponse","displayedAccounts","map","account","_account$balances","name","type","balance","balances","current","log","JSON","stringify","event","transactionResponse","displayedTransactions","transaction","amount","date","incomeResponse","displayedIncome","incomeSource","source","avgMonthlyIncome","groupTransactionsByMonth","grouped","forEach","Date","isNaN","monthYear","toLocaleString","month","year","total","push","Number","groupedTransactions","maxWidth","style","textAlign","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","disabled","marginBottom","length","padding","backgroundColor","fontWeight","index","primary","secondary","toFixed","Object","entries","expandIcon","width","float","toDateString","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\n\r\nconst PlaidIntegration = () => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [income, setIncome] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch link token from backend\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        setLinkToken(response.data.link_token);\r\n      } catch (error) {\r\n        console.error(\"Error creating link token:\", error);\r\n      }\r\n    };\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // Initialize Plaid Link\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        setAccessToken(response.data.access_token);\r\n        fetchBankData(response.data.access_token);\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Fetch accounts, transactions, and income data\r\n  const fetchBankData = async (token) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch Accounts\r\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", { access_token: token });\r\n      const displayedAccounts = accountResponse.data.accounts?.map((account) => ({\r\n        name: account.name,\r\n        type: account.type,\r\n        balance: account.balances?.current,\r\n      }));\r\n      console.log(JSON.stringify({ event: \"Accounts Fetched\", accounts: displayedAccounts }));\r\n      setAccounts(displayedAccounts || []);\r\n\r\n      // Fetch Transactions\r\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", { access_token: token });\r\n      const displayedTransactions = transactionResponse.data.transactions?.map((transaction) => ({\r\n        name: transaction.name,\r\n        amount: transaction.amount,\r\n        date: transaction.date,\r\n      }));\r\n      console.log(JSON.stringify({ event: \"Transactions Fetched\", transactions: displayedTransactions }));\r\n      setTransactions(displayedTransactions || []);\r\n\r\n      // Fetch Income\r\n      const incomeResponse = await axios.post(\"http://localhost:5000/api/income\", { access_token: token });\r\n      const displayedIncome = incomeResponse.data.income?.map((incomeSource) => ({\r\n        source: incomeSource.source,\r\n        avgMonthlyIncome: incomeSource.avgMonthlyIncome,\r\n      }));\r\n      console.log(JSON.stringify({ event: \"Income Fetched\", income: displayedIncome }));\r\n      setIncome(displayedIncome || []);\r\n\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching financial data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to group transactions by month and calculate total spending\r\n  const groupTransactionsByMonth = () => {\r\n    const grouped = {};\r\n\r\n    transactions.forEach((transaction) => {\r\n      if (!transaction.date || !transaction.amount) return;\r\n\r\n      const date = new Date(transaction.date);\r\n      if (isNaN(date)) return;\r\n\r\n      const monthYear = date.toLocaleString(\"default\", { month: \"short\", year: \"numeric\" });\r\n\r\n      if (!grouped[monthYear]) {\r\n        grouped[monthYear] = { transactions: [], total: 0 };\r\n      }\r\n\r\n      grouped[monthYear].transactions.push(transaction);\r\n      grouped[monthYear].total += Number(transaction.amount);\r\n    });\r\n\r\n    return grouped;\r\n  };\r\n\r\n  const groupedTransactions = groupTransactionsByMonth();\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Finance Advisor\r\n      </Typography>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={open}\r\n        disabled={!ready || !linkToken}\r\n        style={{ marginBottom: \"20px\" }}\r\n      >\r\n        Connect Bank Account\r\n      </Button>\r\n\r\n      {loading && <CircularProgress />}\r\n\r\n      {/* Display Income Data */}\r\n      {income.length > 0 && (\r\n        <Card style={{ marginTop: \"20px\", padding: \"20px\", backgroundColor: \"#e8f5e9\" }}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" style={{ fontWeight: \"bold\", color: \"#2E7D32\" }}>\r\n              Estimated Monthly Income\r\n            </Typography>\r\n            <List>\r\n              {income.map((incomeSource, index) => (\r\n                <ListItem key={index}>\r\n                  <ListItemText\r\n                    primary={incomeSource.source || \"Unknown Source\"}\r\n                    secondary={`Estimated Income: $${(incomeSource.avgMonthlyIncome || 0).toFixed(2)}`}\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Display grouped transactions */}\r\n      {Object.entries(groupedTransactions).map(([month, data]) => (\r\n        <Accordion key={month} style={{ marginTop: \"10px\", backgroundColor: \"#2e2e2e\", color: \"white\" }}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}>\r\n            <Typography variant=\"h6\" style={{ fontWeight: \"bold\", width: \"100%\" }}>\r\n              {month} <span style={{ float: \"right\" }}>${data.total.toFixed(2)}</span>\r\n            </Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Name</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Amount</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Date</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {data.transactions.map((transaction, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.name || \"Unknown Transaction\"}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>${(transaction.amount || 0).toFixed(2)}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.date ? new Date(transaction.date).toDateString() : \"Invalid Date\"}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}