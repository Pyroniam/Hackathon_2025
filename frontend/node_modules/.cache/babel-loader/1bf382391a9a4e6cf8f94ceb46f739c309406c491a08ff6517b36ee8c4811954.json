{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = ({\n  setAccessToken\n}) => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n\n  // Fetch the link token from the backend\n  const generateLinkToken = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n      setLinkToken(response.data.link_token);\n    } catch (error) {\n      console.error(\"Error creating link token:\", error);\n    }\n  };\n\n  // Initialize Plaid Link\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        setAccessToken(response.data.access_token);\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateLinkToken,\n      disabled: linkToken !== null,\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), linkToken && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: open,\n      disabled: !ready,\n      children: \"Open Plaid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"UgZmomwPqQ4SogwMYa6nASrEJpY=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","usePlaidLink","axios","jsxDEV","_jsxDEV","PlaidIntegration","setAccessToken","_s","linkToken","setLinkToken","generateLinkToken","response","post","data","link_token","error","console","open","ready","token","onSuccess","publicToken","public_token","access_token","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\n\r\nconst PlaidIntegration = ({ setAccessToken }) => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n\r\n  // Fetch the link token from the backend\r\n  const generateLinkToken = async () => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n      setLinkToken(response.data.link_token);\r\n    } catch (error) {\r\n      console.error(\"Error creating link token:\", error);\r\n    }\r\n  };\r\n\r\n  // Initialize Plaid Link\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        setAccessToken(response.data.access_token);\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={generateLinkToken} disabled={linkToken !== null}>Connect Bank Account</button>\r\n      {linkToken && (\r\n        <button onClick={open} disabled={!ready}>Open Plaid</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,6CAA6C,CAAC;MAChFH,YAAY,CAACE,QAAQ,CAACE,IAAI,CAACC,UAAU,CAAC;IACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;;EAED;EACA,MAAM;IAAEE,IAAI;IAAEC;EAAM,CAAC,GAAGjB,YAAY,CAAC;IACnCkB,KAAK,EAAEX,SAAS;IAChBY,SAAS,EAAE,MAAOC,WAAW,IAAK;MAChC,IAAI;QACF,MAAMV,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,iDAAiD,EAAE;UAAEU,YAAY,EAAED;QAAY,CAAC,CAAC;QACnHf,cAAc,CAACK,QAAQ,CAACE,IAAI,CAACU,YAAY,CAAC;MAC5C,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF,CAAC,CAAC;EAEF,oBACEX,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAQqB,OAAO,EAAEf,iBAAkB;MAACgB,QAAQ,EAAElB,SAAS,KAAK,IAAK;MAAAgB,QAAA,EAAC;IAAoB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC9FtB,SAAS,iBACRJ,OAAA;MAAQqB,OAAO,EAAER,IAAK;MAACS,QAAQ,EAAE,CAACR,KAAM;MAAAM,QAAA,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAC5D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CAlCIF,gBAAgB;EAAA,QAcIJ,YAAY;AAAA;AAAA8B,EAAA,GAdhC1B,gBAAgB;AAoCtB,eAAeA,gBAAgB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}