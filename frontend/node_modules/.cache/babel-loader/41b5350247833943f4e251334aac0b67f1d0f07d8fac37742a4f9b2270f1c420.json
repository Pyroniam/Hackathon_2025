{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { Button, CircularProgress, Container, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Accordion, AccordionSummary, AccordionDetails } from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = () => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [income, setIncome] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch link token from backend\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        setLinkToken(response.data.link_token);\n      } catch (error) {\n        console.error(\"Error creating link token:\", error);\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // Initialize Plaid Link\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        setLoading(true);\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        setAccessToken(response.data.access_token);\n        fetchBankData(response.data.access_token);\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  // Fetch accounts, transactions, and income data\n  const fetchBankData = async token => {\n    try {\n      setLoading(true);\n\n      // Fetch Accounts\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", {\n        access_token: token\n      });\n      setAccounts(accountResponse.data.accounts || []);\n\n      // Fetch Transactions\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", {\n        access_token: token\n      });\n      setTransactions(transactionResponse.data.transactions || []);\n\n      // Fetch Income\n      const incomeResponse = await axios.post(\"http://localhost:5000/api/income\", {\n        access_token: token\n      });\n      console.log(\"Income API Response:\", incomeResponse.data); // Debug log\n\n      if (incomeResponse.data && Array.isArray(incomeResponse.data.income)) {\n        // Ensure all income items have required fields\n        const formattedIncome = incomeResponse.data.income.map(item => ({\n          source: item.source || \"Unknown Source\",\n          amount: item.avgMonthlyIncome || 0,\n          // Use avgMonthlyIncome if available\n          date: item.date || new Date().toISOString().split(\"T\")[0] // Default to today if no date\n        }));\n        console.log(\"Formatted Income Data:\", formattedIncome); // Debug log\n        setIncome(formattedIncome);\n      } else {\n        console.warn(\"Income data is empty or invalid format.\");\n        setIncome([]); // Ensures state is never undefined\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching financial data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Group data by month\n  const groupDataByMonth = (data, dateField) => {\n    const grouped = {};\n    data.forEach(item => {\n      if (!item[dateField]) return; // Skip if date is invalid\n\n      const date = new Date(item[dateField]);\n      if (isNaN(date)) return; // Ensure valid date parsing\n\n      const monthYear = date.toLocaleString(\"default\", {\n        month: \"short\",\n        year: \"numeric\"\n      });\n      if (!grouped[monthYear]) {\n        grouped[monthYear] = {\n          items: [],\n          total: 0\n        };\n      }\n      grouped[monthYear].items.push(item);\n      grouped[monthYear].total += item.amount;\n    });\n    return grouped;\n  };\n  const groupedTransactions = groupDataByMonth(transactions, \"date\");\n  const groupedIncome = groupDataByMonth(income, \"date\");\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Finance Advisor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: open,\n      disabled: !ready || !linkToken,\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }, this), Object.entries(groupedIncome).map(([month, data]) => /*#__PURE__*/_jsxDEV(Accordion, {\n      style: {\n        marginTop: \"10px\",\n        backgroundColor: \"#2e7e32\",\n        color: \"white\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n          style: {\n            color: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 41\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            fontWeight: \"bold\",\n            width: \"100%\"\n          },\n          children: [month, \" (Income) \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              float: \"right\"\n            },\n            children: [\"$\", (data.total || 0).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Source\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.items.map((incomeItem, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: incomeItem.source || \"Unknown Source\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: [\"$\", (incomeItem.amount || 0).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: incomeItem.date ? new Date(incomeItem.date).toDateString() : \"Invalid Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, month, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)), Object.entries(groupedTransactions).map(([month, data]) => /*#__PURE__*/_jsxDEV(Accordion, {\n      style: {\n        marginTop: \"10px\",\n        backgroundColor: \"#2e2e2e\",\n        color: \"white\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n          style: {\n            color: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 41\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            fontWeight: \"bold\",\n            width: \"100%\"\n          },\n          children: [month, \" (Expenses) \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              float: \"right\"\n            },\n            children: [\"$\", (data.total || 0).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Bank\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.items.map(transaction => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.bank_name || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: [\"$\", transaction.amount.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: new Date(transaction.date).toDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 23\n                }, this)]\n              }, transaction.transaction_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, month, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"+hH7PtKbHh/ZZjYoj52mGd8X9zY=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","Button","CircularProgress","Container","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Accordion","AccordionSummary","AccordionDetails","ExpandMoreIcon","jsxDEV","_jsxDEV","PlaidIntegration","_s","linkToken","setLinkToken","accessToken","setAccessToken","accounts","setAccounts","transactions","setTransactions","income","setIncome","loading","setLoading","fetchLinkToken","response","post","data","link_token","error","console","open","ready","token","onSuccess","publicToken","public_token","access_token","fetchBankData","accountResponse","transactionResponse","incomeResponse","log","Array","isArray","formattedIncome","map","item","source","amount","avgMonthlyIncome","date","Date","toISOString","split","warn","groupDataByMonth","dateField","grouped","forEach","isNaN","monthYear","toLocaleString","month","year","items","total","push","groupedTransactions","groupedIncome","maxWidth","style","textAlign","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","disabled","marginBottom","Object","entries","backgroundColor","expandIcon","fontWeight","width","float","toFixed","incomeItem","index","toDateString","transaction","bank_name","name","transaction_id","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n} from \"@mui/material\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\n\r\nconst PlaidIntegration = () => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [income, setIncome] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch link token from backend\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        setLinkToken(response.data.link_token);\r\n      } catch (error) {\r\n        console.error(\"Error creating link token:\", error);\r\n      }\r\n    };\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // Initialize Plaid Link\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        setAccessToken(response.data.access_token);\r\n        fetchBankData(response.data.access_token);\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Fetch accounts, transactions, and income data\r\n  const fetchBankData = async (token) => {\r\n    try {\r\n      setLoading(true);\r\n  \r\n      // Fetch Accounts\r\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", { access_token: token });\r\n      setAccounts(accountResponse.data.accounts || []);\r\n  \r\n      // Fetch Transactions\r\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", { access_token: token });\r\n      setTransactions(transactionResponse.data.transactions || []);\r\n  \r\n      // Fetch Income\r\n      const incomeResponse = await axios.post(\"http://localhost:5000/api/income\", { access_token: token });\r\n  \r\n      console.log(\"Income API Response:\", incomeResponse.data); // Debug log\r\n  \r\n      if (incomeResponse.data && Array.isArray(incomeResponse.data.income)) {\r\n        // Ensure all income items have required fields\r\n        const formattedIncome = incomeResponse.data.income.map((item) => ({\r\n          source: item.source || \"Unknown Source\",\r\n          amount: item.avgMonthlyIncome || 0, // Use avgMonthlyIncome if available\r\n          date: item.date || new Date().toISOString().split(\"T\")[0], // Default to today if no date\r\n        }));\r\n  \r\n        console.log(\"Formatted Income Data:\", formattedIncome); // Debug log\r\n        setIncome(formattedIncome);\r\n      } else {\r\n        console.warn(\"Income data is empty or invalid format.\");\r\n        setIncome([]); // Ensures state is never undefined\r\n      }\r\n  \r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching financial data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n\r\n  // Group data by month\r\n  const groupDataByMonth = (data, dateField) => {\r\n    const grouped = {};\r\n\r\n    data.forEach((item) => {\r\n      if (!item[dateField]) return; // Skip if date is invalid\r\n\r\n      const date = new Date(item[dateField]);\r\n      if (isNaN(date)) return; // Ensure valid date parsing\r\n\r\n      const monthYear = date.toLocaleString(\"default\", { month: \"short\", year: \"numeric\" });\r\n\r\n      if (!grouped[monthYear]) {\r\n        grouped[monthYear] = { items: [], total: 0 };\r\n      }\r\n\r\n      grouped[monthYear].items.push(item);\r\n      grouped[monthYear].total += item.amount;\r\n    });\r\n\r\n    return grouped;\r\n  };\r\n\r\n  const groupedTransactions = groupDataByMonth(transactions, \"date\");\r\n  const groupedIncome = groupDataByMonth(income, \"date\");\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Finance Advisor\r\n      </Typography>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={open}\r\n        disabled={!ready || !linkToken}\r\n        style={{ marginBottom: \"20px\" }}\r\n      >\r\n        Connect Bank Account\r\n      </Button>\r\n\r\n      {loading && <CircularProgress />}\r\n\r\n      {/* Display Income */}\r\n      {Object.entries(groupedIncome).map(([month, data]) => (\r\n        <Accordion key={month} style={{ marginTop: \"10px\", backgroundColor: \"#2e7e32\", color: \"white\" }}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}>\r\n            <Typography variant=\"h6\" style={{ fontWeight: \"bold\", width: \"100%\" }}>\r\n              {month} (Income) <span style={{ float: \"right\" }}>${(data.total || 0).toFixed(2)}</span>\r\n            </Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Source</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Amount</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Date</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {data.items.map((incomeItem, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell style={{ color: \"white\" }}>\r\n                        {incomeItem.source || \"Unknown Source\"}\r\n                      </TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>\r\n                        ${(incomeItem.amount || 0).toFixed(2)}\r\n                      </TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>\r\n                        {incomeItem.date ? new Date(incomeItem.date).toDateString() : \"Invalid Date\"}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      ))}\r\n\r\n      {/* Display Transactions */}\r\n      {Object.entries(groupedTransactions).map(([month, data]) => (\r\n        <Accordion key={month} style={{ marginTop: \"10px\", backgroundColor: \"#2e2e2e\", color: \"white\" }}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}>\r\n            <Typography variant=\"h6\" style={{ fontWeight: \"bold\", width: \"100%\" }}>\r\n              {month} (Expenses) <span style={{ float: \"right\" }}>${(data.total || 0).toFixed(2)}</span>\r\n            </Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Bank</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Name</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Price</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Date</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {data.items.map((transaction) => (\r\n                    <TableRow key={transaction.transaction_id}>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.bank_name || \"N/A\"}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.name}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>${transaction.amount.toFixed(2)}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>{new Date(transaction.date).toDateString()}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}