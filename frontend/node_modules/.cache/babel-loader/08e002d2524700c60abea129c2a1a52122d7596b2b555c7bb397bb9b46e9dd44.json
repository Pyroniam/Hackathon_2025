{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = ({\n  setAccessToken\n}) => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch link token from backend\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        setLinkToken(response.data.link_token);\n      } catch (error) {\n        console.error(\"Error creating link token:\", error);\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // Fetch bank data after authentication\n  const fetchBankData = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/accounts\");\n      console.log(\"🚀 API Response:\", response.data);\n      if (!response.data || !Array.isArray(response.data.transactions)) {\n        throw new Error(\"Invalid transactions data received\");\n      }\n      setTransactions(response.data.transactions);\n    } catch (error) {\n      console.error(\"❌ Error fetching financial data:\", error);\n      setTransactions([]); // Ensure it's an empty array if an error occurs\n    }\n    setLoading(false);\n  };\n\n  // Plaid Link setup\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        setAccessToken(response.data.access_token);\n        fetchBankData(); // Fetch bank data after linking\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n      }\n    }\n  });\n\n  // Helper function to group transactions by month\n  const groupTransactionsByMonth = () => {\n    if (!Array.isArray(transactions)) {\n      console.error(\"🚨 Transactions is not an array:\", transactions);\n      return {}; // Return an empty object to prevent errors\n    }\n    const grouped = {};\n    transactions.forEach(transaction => {\n      const date = new Date(transaction.date);\n      const monthYear = date.toLocaleString(\"default\", {\n        month: \"long\",\n        year: \"numeric\"\n      });\n      if (!grouped[monthYear]) {\n        grouped[monthYear] = [];\n      }\n      grouped[monthYear].push(transaction);\n    });\n    return grouped;\n  };\n  const groupedTransactions = groupTransactionsByMonth();\n  console.log(\"Grouped Transactions:\", groupedTransactions); // Debugging log\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      backgroundColor: \"#1e1e1e\",\n      color: \"white\",\n      minHeight: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Finance Advisor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: open,\n      disabled: !ready || !linkToken,\n      style: {\n        marginBottom: \"20px\",\n        padding: \"10px 20px\"\n      },\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      children: \"Loading transactions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }, this), !loading && transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(groupedTransactions).map(([month, transactions]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            fontWeight: \"bold\",\n            marginBottom: \"10px\"\n          },\n          children: month\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          style: {\n            backgroundColor: \"#2e2e2e\",\n            color: \"white\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Bank\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.bank_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: [\"$\", transaction.amount.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: new Date(transaction.date).getDate()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 25\n                }, this)]\n              }, transaction.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this)]\n      }, month, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"XQ/UvjB9E12COuFOMn9eM3oPeho=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Typography","jsxDEV","_jsxDEV","PlaidIntegration","setAccessToken","_s","linkToken","setLinkToken","transactions","setTransactions","loading","setLoading","fetchLinkToken","response","post","data","link_token","error","console","fetchBankData","get","log","Array","isArray","Error","open","ready","token","onSuccess","publicToken","public_token","access_token","groupTransactionsByMonth","grouped","forEach","transaction","date","Date","monthYear","toLocaleString","month","year","push","groupedTransactions","style","padding","backgroundColor","color","minHeight","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","marginBottom","length","Object","entries","map","fontWeight","component","bank_name","name","amount","toFixed","getDate","id","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography } from \"@mui/material\";\r\n\r\nconst PlaidIntegration = ({ setAccessToken }) => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch link token from backend\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        setLinkToken(response.data.link_token);\r\n      } catch (error) {\r\n        console.error(\"Error creating link token:\", error);\r\n      }\r\n    };\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // Fetch bank data after authentication\r\n  const fetchBankData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/accounts\");\r\n      \r\n      console.log(\"🚀 API Response:\", response.data);\r\n      \r\n      if (!response.data || !Array.isArray(response.data.transactions)) {\r\n        throw new Error(\"Invalid transactions data received\");\r\n      }\r\n  \r\n      setTransactions(response.data.transactions);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching financial data:\", error);\r\n      setTransactions([]); // Ensure it's an empty array if an error occurs\r\n    }\r\n    setLoading(false);\r\n  };\r\n  \r\n\r\n  // Plaid Link setup\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        setAccessToken(response.data.access_token);\r\n        fetchBankData(); // Fetch bank data after linking\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Helper function to group transactions by month\r\n  const groupTransactionsByMonth = () => {\r\n    if (!Array.isArray(transactions)) {\r\n      console.error(\"🚨 Transactions is not an array:\", transactions);\r\n      return {}; // Return an empty object to prevent errors\r\n    }\r\n  \r\n    const grouped = {};\r\n    transactions.forEach((transaction) => {\r\n      const date = new Date(transaction.date);\r\n      const monthYear = date.toLocaleString(\"default\", { month: \"long\", year: \"numeric\" });\r\n  \r\n      if (!grouped[monthYear]) {\r\n        grouped[monthYear] = [];\r\n      }\r\n      grouped[monthYear].push(transaction);\r\n    });\r\n  \r\n    return grouped;\r\n  };\r\n\r\n  const groupedTransactions = groupTransactionsByMonth();\r\n  console.log(\"Grouped Transactions:\", groupedTransactions); // Debugging log\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", backgroundColor: \"#1e1e1e\", color: \"white\", minHeight: \"100vh\" }}>\r\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n        Finance Advisor\r\n      </Typography>\r\n      <button onClick={open} disabled={!ready || !linkToken} style={{ marginBottom: \"20px\", padding: \"10px 20px\" }}>\r\n        Connect Bank Account\r\n      </button>\r\n\r\n      {loading && <Typography variant=\"h6\" align=\"center\">Loading transactions...</Typography>}\r\n\r\n      {!loading && transactions.length > 0 && (\r\n        <div>\r\n          {Object.entries(groupedTransactions).map(([month, transactions]) => (\r\n            <div key={month} style={{ marginBottom: \"30px\" }}>\r\n              <Typography variant=\"h6\" style={{ fontWeight: \"bold\", marginBottom: \"10px\" }}>\r\n                {month}\r\n              </Typography>\r\n              <TableContainer component={Paper} style={{ backgroundColor: \"#2e2e2e\", color: \"white\" }}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Bank</TableCell>\r\n                      <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Name</TableCell>\r\n                      <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Price</TableCell>\r\n                      <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Date</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {transactions.map((transaction) => (\r\n                      <TableRow key={transaction.id}>\r\n                        <TableCell style={{ color: \"white\" }}>{transaction.bank_name}</TableCell>\r\n                        <TableCell style={{ color: \"white\" }}>{transaction.name}</TableCell>\r\n                        <TableCell style={{ color: \"white\" }}>${transaction.amount.toFixed(2)}</TableCell>\r\n                        <TableCell style={{ color: \"white\" }}>{new Date(transaction.date).getDate()}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}