{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { Button, CircularProgress, Container, Card, CardContent, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = () => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch link token from backend\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        setLinkToken(response.data.link_token);\n      } catch (error) {\n        console.error(\"Error creating link token:\", error);\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // Initialize Plaid Link\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        setLoading(true);\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        setAccessToken(response.data.access_token);\n        fetchBankData(response.data.access_token);\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  // Fetch accounts and transactions\n  const fetchBankData = async token => {\n    try {\n      setLoading(true);\n\n      // Fetch Accounts\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", {\n        access_token: token\n      });\n      console.log(\"✅ Accounts Response:\", accountResponse.data);\n      setAccounts(accountResponse.data.accounts || []);\n\n      // Fetch Transactions\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", {\n        access_token: token\n      });\n      console.log(\"✅ Transactions Response:\", transactionResponse.data);\n      setTransactions(transactionResponse.data.transactions || []);\n    } catch (error) {\n      console.error(\"❌ Error fetching financial data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper function to group transactions by month and calculate total spending\n  const groupTransactionsByMonth = () => {\n    const grouped = {};\n    transactions.forEach(transaction => {\n      const date = new Date(transaction.date);\n      const monthYear = date.toLocaleString(\"default\", {\n        month: \"short\",\n        year: \"numeric\"\n      }); // Example: \"Jan 2024\"\n\n      if (!grouped[monthYear]) {\n        grouped[monthYear] = {\n          transactions: [],\n          total: 0\n        };\n      }\n      grouped[monthYear].transactions.push(transaction);\n      grouped[monthYear].total += transaction.amount;\n    });\n    return grouped;\n  };\n  const groupedTransactions = groupTransactionsByMonth();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Finance Advisor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: open,\n      disabled: !ready || !linkToken,\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }, this), Object.entries(groupedTransactions).map(([month, data]) => /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: \"20px\",\n        padding: \"10px\",\n        backgroundColor: \"#2e2e2e\",\n        color: \"white\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            fontWeight: \"bold\",\n            borderBottom: \"1px solid gray\",\n            paddingBottom: \"5px\"\n          },\n          children: [month, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              float: \"right\"\n            },\n            children: [\"$\", data.total.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Bank\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.transactions.map(transaction => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.bank_name || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: [\"$\", transaction.amount.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: new Date(transaction.date).getDate()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 23\n                }, this)]\n              }, transaction.transaction_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, month, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"hX9AxZFzfCCHP1Te4JowSpzAVL0=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","Button","CircularProgress","Container","Card","CardContent","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","jsxDEV","_jsxDEV","PlaidIntegration","_s","linkToken","setLinkToken","accessToken","setAccessToken","accounts","setAccounts","transactions","setTransactions","loading","setLoading","fetchLinkToken","response","post","data","link_token","error","console","open","ready","token","onSuccess","publicToken","public_token","access_token","fetchBankData","accountResponse","log","transactionResponse","groupTransactionsByMonth","grouped","forEach","transaction","date","Date","monthYear","toLocaleString","month","year","total","push","amount","groupedTransactions","maxWidth","style","textAlign","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","disabled","marginBottom","Object","entries","map","padding","backgroundColor","fontWeight","borderBottom","paddingBottom","float","toFixed","bank_name","name","getDate","transaction_id","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@mui/material\";\r\n\r\nconst PlaidIntegration = () => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch link token from backend\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        setLinkToken(response.data.link_token);\r\n      } catch (error) {\r\n        console.error(\"Error creating link token:\", error);\r\n      }\r\n    };\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // Initialize Plaid Link\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        setAccessToken(response.data.access_token);\r\n        fetchBankData(response.data.access_token);\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Fetch accounts and transactions\r\n  const fetchBankData = async (token) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch Accounts\r\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", { access_token: token });\r\n      console.log(\"✅ Accounts Response:\", accountResponse.data);\r\n      setAccounts(accountResponse.data.accounts || []);\r\n\r\n      // Fetch Transactions\r\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", { access_token: token });\r\n      console.log(\"✅ Transactions Response:\", transactionResponse.data);\r\n      setTransactions(transactionResponse.data.transactions || []);\r\n\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching financial data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to group transactions by month and calculate total spending\r\n  const groupTransactionsByMonth = () => {\r\n    const grouped = {};\r\n\r\n    transactions.forEach((transaction) => {\r\n      const date = new Date(transaction.date);\r\n      const monthYear = date.toLocaleString(\"default\", { month: \"short\", year: \"numeric\" }); // Example: \"Jan 2024\"\r\n\r\n      if (!grouped[monthYear]) {\r\n        grouped[monthYear] = { transactions: [], total: 0 };\r\n      }\r\n\r\n      grouped[monthYear].transactions.push(transaction);\r\n      grouped[monthYear].total += transaction.amount;\r\n    });\r\n\r\n    return grouped;\r\n  };\r\n\r\n  const groupedTransactions = groupTransactionsByMonth();\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Finance Advisor\r\n      </Typography>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={open}\r\n        disabled={!ready || !linkToken}\r\n        style={{ marginBottom: \"20px\" }}\r\n      >\r\n        Connect Bank Account\r\n      </Button>\r\n\r\n      {loading && <CircularProgress />}\r\n\r\n      {/* Display grouped transactions */}\r\n      {Object.entries(groupedTransactions).map(([month, data]) => (\r\n        <Card key={month} style={{ marginTop: \"20px\", padding: \"10px\", backgroundColor: \"#2e2e2e\", color: \"white\" }}>\r\n          <CardContent>\r\n            <Typography\r\n              variant=\"h6\"\r\n              style={{ fontWeight: \"bold\", borderBottom: \"1px solid gray\", paddingBottom: \"5px\" }}\r\n            >\r\n              {month} <span style={{ float: \"right\" }}>${data.total.toFixed(2)}</span>\r\n            </Typography>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Bank</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Name</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Price</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Date</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {data.transactions.map((transaction) => (\r\n                    <TableRow key={transaction.transaction_id}>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.bank_name || \"N/A\"}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.name}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>${transaction.amount.toFixed(2)}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>{new Date(transaction.date).getDate()}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,MAAM,EACNC,gBAAgB,EAChBC,SAAS,EACTC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,cAAc,EACdC,SAAS,EACTC,QAAQ,QACH,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC4B,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACd,MAAM6B,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,6CAA6C,CAAC;QAChFX,YAAY,CAACU,QAAQ,CAACE,IAAI,CAACC,UAAU,CAAC;MACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACDL,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM;IAAEO,IAAI;IAAEC;EAAM,CAAC,GAAGpC,YAAY,CAAC;IACnCqC,KAAK,EAAEnB,SAAS;IAChBoB,SAAS,EAAE,MAAOC,WAAW,IAAK;MAChC,IAAI;QACFZ,UAAU,CAAC,IAAI,CAAC;QAChB,MAAME,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,iDAAiD,EAAE;UAAEU,YAAY,EAAED;QAAY,CAAC,CAAC;QACnHlB,cAAc,CAACQ,QAAQ,CAACE,IAAI,CAACU,YAAY,CAAC;QAC1CC,aAAa,CAACb,QAAQ,CAACE,IAAI,CAACU,YAAY,CAAC;MAC3C,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC,CAAC;;EAEF;EACA,MAAMe,aAAa,GAAG,MAAOL,KAAK,IAAK;IACrC,IAAI;MACFV,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAMgB,eAAe,GAAG,MAAM1C,KAAK,CAAC6B,IAAI,CAAC,oCAAoC,EAAE;QAAEW,YAAY,EAAEJ;MAAM,CAAC,CAAC;MACvGH,OAAO,CAACU,GAAG,CAAC,sBAAsB,EAAED,eAAe,CAACZ,IAAI,CAAC;MACzDR,WAAW,CAACoB,eAAe,CAACZ,IAAI,CAACT,QAAQ,IAAI,EAAE,CAAC;;MAEhD;MACA,MAAMuB,mBAAmB,GAAG,MAAM5C,KAAK,CAAC6B,IAAI,CAAC,wCAAwC,EAAE;QAAEW,YAAY,EAAEJ;MAAM,CAAC,CAAC;MAC/GH,OAAO,CAACU,GAAG,CAAC,0BAA0B,EAAEC,mBAAmB,CAACd,IAAI,CAAC;MACjEN,eAAe,CAACoB,mBAAmB,CAACd,IAAI,CAACP,YAAY,IAAI,EAAE,CAAC;IAE9D,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMmB,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,OAAO,GAAG,CAAC,CAAC;IAElBvB,YAAY,CAACwB,OAAO,CAAEC,WAAW,IAAK;MACpC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,WAAW,CAACC,IAAI,CAAC;MACvC,MAAME,SAAS,GAAGF,IAAI,CAACG,cAAc,CAAC,SAAS,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAU,CAAC,CAAC,CAAC,CAAC;;MAEvF,IAAI,CAACR,OAAO,CAACK,SAAS,CAAC,EAAE;QACvBL,OAAO,CAACK,SAAS,CAAC,GAAG;UAAE5B,YAAY,EAAE,EAAE;UAAEgC,KAAK,EAAE;QAAE,CAAC;MACrD;MAEAT,OAAO,CAACK,SAAS,CAAC,CAAC5B,YAAY,CAACiC,IAAI,CAACR,WAAW,CAAC;MACjDF,OAAO,CAACK,SAAS,CAAC,CAACI,KAAK,IAAIP,WAAW,CAACS,MAAM;IAChD,CAAC,CAAC;IAEF,OAAOX,OAAO;EAChB,CAAC;EAED,MAAMY,mBAAmB,GAAGb,wBAAwB,CAAC,CAAC;EAEtD,oBACE/B,OAAA,CAACX,SAAS;IAACwD,QAAQ,EAAC,IAAI;IAACC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACzEjD,OAAA,CAACR,UAAU;MAAC0D,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAEtC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEbvD,OAAA,CAACb,MAAM;MACL+D,OAAO,EAAC,WAAW;MACnBM,KAAK,EAAC,SAAS;MACfC,OAAO,EAAErC,IAAK;MACdsC,QAAQ,EAAE,CAACrC,KAAK,IAAI,CAAClB,SAAU;MAC/B2C,KAAK,EAAE;QAAEa,YAAY,EAAE;MAAO,CAAE;MAAAV,QAAA,EACjC;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAER5C,OAAO,iBAAIX,OAAA,CAACZ,gBAAgB;MAAAgE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG/BK,MAAM,CAACC,OAAO,CAACjB,mBAAmB,CAAC,CAACkB,GAAG,CAAC,CAAC,CAACvB,KAAK,EAAEvB,IAAI,CAAC,kBACrDhB,OAAA,CAACV,IAAI;MAAawD,KAAK,EAAE;QAAEE,SAAS,EAAE,MAAM;QAAEe,OAAO,EAAE,MAAM;QAAEC,eAAe,EAAE,SAAS;QAAER,KAAK,EAAE;MAAQ,CAAE;MAAAP,QAAA,eAC1GjD,OAAA,CAACT,WAAW;QAAA0D,QAAA,gBACVjD,OAAA,CAACR,UAAU;UACT0D,OAAO,EAAC,IAAI;UACZJ,KAAK,EAAE;YAAEmB,UAAU,EAAE,MAAM;YAAEC,YAAY,EAAE,gBAAgB;YAAEC,aAAa,EAAE;UAAM,CAAE;UAAAlB,QAAA,GAEnFV,KAAK,EAAC,GAAC,eAAAvC,OAAA;YAAM8C,KAAK,EAAE;cAAEsB,KAAK,EAAE;YAAQ,CAAE;YAAAnB,QAAA,GAAC,GAAC,EAACjC,IAAI,CAACyB,KAAK,CAAC4B,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9D,CAAC,eACbvD,OAAA,CAACJ,cAAc;UAAAqD,QAAA,eACbjD,OAAA,CAACP,KAAK;YAAAwD,QAAA,gBACJjD,OAAA,CAACH,SAAS;cAAAoD,QAAA,eACRjD,OAAA,CAACF,QAAQ;gBAAAmD,QAAA,gBACPjD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE,OAAO;oBAAES,UAAU,EAAE;kBAAO,CAAE;kBAAAhB,QAAA,EAAC;gBAAI;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC1EvD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE,OAAO;oBAAES,UAAU,EAAE;kBAAO,CAAE;kBAAAhB,QAAA,EAAC;gBAAI;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC1EvD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE,OAAO;oBAAES,UAAU,EAAE;kBAAO,CAAE;kBAAAhB,QAAA,EAAC;gBAAK;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC3EvD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE,OAAO;oBAAES,UAAU,EAAE;kBAAO,CAAE;kBAAAhB,QAAA,EAAC;gBAAI;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,eACZvD,OAAA,CAACN,SAAS;cAAAuD,QAAA,EACPjC,IAAI,CAACP,YAAY,CAACqD,GAAG,CAAE5B,WAAW,iBACjClC,OAAA,CAACF,QAAQ;gBAAAmD,QAAA,gBACPjD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE;kBAAQ,CAAE;kBAAAP,QAAA,EAAEf,WAAW,CAACoC,SAAS,IAAI;gBAAK;kBAAAlB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eAClFvD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE;kBAAQ,CAAE;kBAAAP,QAAA,EAAEf,WAAW,CAACqC;gBAAI;kBAAAnB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eACpEvD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE;kBAAQ,CAAE;kBAAAP,QAAA,GAAC,GAAC,EAACf,WAAW,CAACS,MAAM,CAAC0B,OAAO,CAAC,CAAC,CAAC;gBAAA;kBAAAjB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eAClFvD,OAAA,CAACL,SAAS;kBAACmD,KAAK,EAAE;oBAAEU,KAAK,EAAE;kBAAQ,CAAE;kBAAAP,QAAA,EAAE,IAAIb,IAAI,CAACF,WAAW,CAACC,IAAI,CAAC,CAACqC,OAAO,CAAC;gBAAC;kBAAApB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC;cAAA,GAJ3ErB,WAAW,CAACuC,cAAc;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAK/B,CACX;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC,GA9BLhB,KAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA+BV,CACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAACrD,EAAA,CAvIID,gBAAgB;EAAA,QAqBIhB,YAAY;AAAA;AAAAyF,EAAA,GArBhCzE,gBAAgB;AAyItB,eAAeA,gBAAgB;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}