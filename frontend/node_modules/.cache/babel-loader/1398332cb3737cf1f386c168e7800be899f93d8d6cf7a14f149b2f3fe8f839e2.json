{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pyron\\\\CSE\\\\Hackathon_2025_Finance\\\\Test\\\\frontend\\\\src\\\\components\\\\PlaidIntegration.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport axios from \"axios\";\nimport { Button, CircularProgress, Container, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Accordion, AccordionSummary, AccordionDetails, Card, CardContent, List, ListItem, ListItemText } from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaidIntegration = () => {\n  _s();\n  const [linkToken, setLinkToken] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [income, setIncome] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch link token from backend\n  useEffect(() => {\n    const fetchLinkToken = async () => {\n      try {\n        console.log(JSON.stringify({\n          event: \"Fetching Link Token\",\n          url: \"/api/create_link_token\",\n          method: \"POST\"\n        }));\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\n        console.log(JSON.stringify({\n          event: \"Received Link Token\",\n          data: response.data\n        }));\n        setLinkToken(response.data.link_token);\n      } catch (error) {\n        console.error(JSON.stringify({\n          error: \"Error creating link token\",\n          details: error.message\n        }));\n      }\n    };\n    fetchLinkToken();\n  }, []);\n\n  // Initialize Plaid Link\n  const {\n    open,\n    ready\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async publicToken => {\n      try {\n        setLoading(true);\n        console.log(JSON.stringify({\n          event: \"Exchanging Public Token\",\n          url: \"/api/exchange_public_token\",\n          method: \"POST\",\n          payload: {\n            public_token: publicToken\n          }\n        }));\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", {\n          public_token: publicToken\n        });\n        console.log(JSON.stringify({\n          event: \"Received Access Token\",\n          data: response.data\n        }));\n        setAccessToken(response.data.access_token);\n        fetchBankData(response.data.access_token);\n      } catch (error) {\n        console.error(JSON.stringify({\n          error: \"Error exchanging token\",\n          details: error.message\n        }));\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  // Fetch accounts, transactions, and income data\n  const fetchBankData = async token => {\n    try {\n      setLoading(true);\n      console.log(JSON.stringify({\n        event: \"Fetching Accounts\",\n        url: \"/api/accounts\",\n        method: \"POST\",\n        payload: {\n          access_token: token\n        }\n      }));\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", {\n        access_token: token\n      });\n      console.log(JSON.stringify({\n        event: \"Received Accounts\",\n        data: accountResponse.data\n      }));\n      setAccounts(accountResponse.data.accounts || []);\n      console.log(JSON.stringify({\n        event: \"Fetching Transactions\",\n        url: \"/api/transactions\",\n        method: \"POST\",\n        payload: {\n          access_token: token\n        }\n      }));\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", {\n        access_token: token\n      });\n      console.log(JSON.stringify({\n        event: \"Received Transactions\",\n        data: transactionResponse.data\n      }));\n      setTransactions(transactionResponse.data.transactions || []);\n      console.log(JSON.stringify({\n        event: \"Fetching Income\",\n        url: \"/api/income\",\n        method: \"POST\",\n        payload: {\n          access_token: token\n        }\n      }));\n      const incomeResponse = await axios.post(\"http://localhost:5000/api/income\", {\n        access_token: token\n      });\n      console.log(JSON.stringify({\n        event: \"Received Income\",\n        data: incomeResponse.data\n      }));\n      setIncome(incomeResponse.data.income || []);\n    } catch (error) {\n      console.error(JSON.stringify({\n        error: \"Error fetching financial data\",\n        details: error.message\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper function to group transactions by month and calculate total spending\n  const groupTransactionsByMonth = () => {\n    const grouped = {};\n    transactions.forEach(transaction => {\n      if (!transaction.date || !transaction.amount) return;\n      const date = new Date(transaction.date);\n      if (isNaN(date)) return;\n      const monthYear = date.toLocaleString(\"default\", {\n        month: \"short\",\n        year: \"numeric\"\n      });\n      if (!grouped[monthYear]) {\n        grouped[monthYear] = {\n          transactions: [],\n          total: 0\n        };\n      }\n      grouped[monthYear].transactions.push(transaction);\n      grouped[monthYear].total += Number(transaction.amount);\n    });\n    return grouped;\n  };\n  const groupedTransactions = groupTransactionsByMonth();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Finance Advisor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: open,\n      disabled: !ready || !linkToken,\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: \"Connect Bank Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 19\n    }, this), income.length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: \"20px\",\n        padding: \"20px\",\n        backgroundColor: \"#e8f5e9\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          style: {\n            fontWeight: \"bold\",\n            color: \"#2E7D32\"\n          },\n          children: \"Estimated Monthly Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: income.map((incomeSource, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: incomeSource.source || \"Unknown Source\",\n              secondary: `Estimated Income: $${(incomeSource.avgMonthlyIncome || 0).toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), Object.entries(groupedTransactions).map(([month, data]) => /*#__PURE__*/_jsxDEV(Accordion, {\n      style: {\n        marginTop: \"10px\",\n        backgroundColor: \"#2e2e2e\",\n        color: \"white\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n          style: {\n            color: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 41\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          style: {\n            fontWeight: \"bold\",\n            width: \"100%\"\n          },\n          children: [month, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              float: \"right\"\n            },\n            children: [\"$\", data.total.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Bank\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.transactions.map(transaction => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.bank_name || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.name || \"Unknown Transaction\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: [\"$\", (transaction.amount || 0).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    color: \"white\"\n                  },\n                  children: transaction.date ? new Date(transaction.date).toDateString() : \"Invalid Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 23\n                }, this)]\n              }, transaction.transaction_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, month, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaidIntegration, \"+hH7PtKbHh/ZZjYoj52mGd8X9zY=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidIntegration;\nexport default PlaidIntegration;\nvar _c;\n$RefreshReg$(_c, \"PlaidIntegration\");","map":{"version":3,"names":["React","useState","useEffect","usePlaidLink","axios","Button","CircularProgress","Container","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Accordion","AccordionSummary","AccordionDetails","Card","CardContent","List","ListItem","ListItemText","ExpandMoreIcon","jsxDEV","_jsxDEV","PlaidIntegration","_s","linkToken","setLinkToken","accessToken","setAccessToken","accounts","setAccounts","transactions","setTransactions","income","setIncome","loading","setLoading","fetchLinkToken","console","log","JSON","stringify","event","url","method","response","post","data","link_token","error","details","message","open","ready","token","onSuccess","publicToken","payload","public_token","access_token","fetchBankData","accountResponse","transactionResponse","incomeResponse","groupTransactionsByMonth","grouped","forEach","transaction","date","amount","Date","isNaN","monthYear","toLocaleString","month","year","total","push","Number","groupedTransactions","maxWidth","style","textAlign","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","disabled","marginBottom","length","padding","backgroundColor","fontWeight","map","incomeSource","index","primary","source","secondary","avgMonthlyIncome","toFixed","Object","entries","expandIcon","width","float","bank_name","name","toDateString","transaction_id","_c","$RefreshReg$"],"sources":["C:/Users/Pyron/CSE/Hackathon_2025_Finance/Test/frontend/src/components/PlaidIntegration.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { usePlaidLink } from \"react-plaid-link\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\n\r\nconst PlaidIntegration = () => {\r\n  const [linkToken, setLinkToken] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [income, setIncome] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch link token from backend\r\n  useEffect(() => {\r\n    const fetchLinkToken = async () => {\r\n      try {\r\n        console.log(JSON.stringify({ event: \"Fetching Link Token\", url: \"/api/create_link_token\", method: \"POST\" }));\r\n        const response = await axios.post(\"http://localhost:5000/api/create_link_token\");\r\n        console.log(JSON.stringify({ event: \"Received Link Token\", data: response.data }));\r\n        setLinkToken(response.data.link_token);\r\n      } catch (error) {\r\n        console.error(JSON.stringify({ error: \"Error creating link token\", details: error.message }));\r\n      }\r\n    };\r\n    fetchLinkToken();\r\n  }, []);\r\n\r\n  // Initialize Plaid Link\r\n  const { open, ready } = usePlaidLink({\r\n    token: linkToken,\r\n    onSuccess: async (publicToken) => {\r\n      try {\r\n        setLoading(true);\r\n        console.log(JSON.stringify({ event: \"Exchanging Public Token\", url: \"/api/exchange_public_token\", method: \"POST\", payload: { public_token: publicToken } }));\r\n        const response = await axios.post(\"http://localhost:5000/api/exchange_public_token\", { public_token: publicToken });\r\n        console.log(JSON.stringify({ event: \"Received Access Token\", data: response.data }));\r\n        setAccessToken(response.data.access_token);\r\n        fetchBankData(response.data.access_token);\r\n      } catch (error) {\r\n        console.error(JSON.stringify({ error: \"Error exchanging token\", details: error.message }));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Fetch accounts, transactions, and income data\r\n  const fetchBankData = async (token) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      console.log(JSON.stringify({ event: \"Fetching Accounts\", url: \"/api/accounts\", method: \"POST\", payload: { access_token: token } }));\r\n      const accountResponse = await axios.post(\"http://localhost:5000/api/accounts\", { access_token: token });\r\n      console.log(JSON.stringify({ event: \"Received Accounts\", data: accountResponse.data }));\r\n      setAccounts(accountResponse.data.accounts || []);\r\n\r\n      console.log(JSON.stringify({ event: \"Fetching Transactions\", url: \"/api/transactions\", method: \"POST\", payload: { access_token: token } }));\r\n      const transactionResponse = await axios.post(\"http://localhost:5000/api/transactions\", { access_token: token });\r\n      console.log(JSON.stringify({ event: \"Received Transactions\", data: transactionResponse.data }));\r\n      setTransactions(transactionResponse.data.transactions || []);\r\n\r\n      console.log(JSON.stringify({ event: \"Fetching Income\", url: \"/api/income\", method: \"POST\", payload: { access_token: token } }));\r\n      const incomeResponse = await axios.post(\"http://localhost:5000/api/income\", { access_token: token });\r\n      console.log(JSON.stringify({ event: \"Received Income\", data: incomeResponse.data }));\r\n      setIncome(incomeResponse.data.income || []);\r\n\r\n    } catch (error) {\r\n      console.error(JSON.stringify({ error: \"Error fetching financial data\", details: error.message }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to group transactions by month and calculate total spending\r\n  const groupTransactionsByMonth = () => {\r\n    const grouped = {};\r\n\r\n    transactions.forEach((transaction) => {\r\n      if (!transaction.date || !transaction.amount) return;\r\n\r\n      const date = new Date(transaction.date);\r\n      if (isNaN(date)) return;\r\n\r\n      const monthYear = date.toLocaleString(\"default\", { month: \"short\", year: \"numeric\" });\r\n\r\n      if (!grouped[monthYear]) {\r\n        grouped[monthYear] = { transactions: [], total: 0 };\r\n      }\r\n\r\n      grouped[monthYear].transactions.push(transaction);\r\n      grouped[monthYear].total += Number(transaction.amount);\r\n    });\r\n\r\n    return grouped;\r\n  };\r\n\r\n  const groupedTransactions = groupTransactionsByMonth();\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Finance Advisor\r\n      </Typography>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={open}\r\n        disabled={!ready || !linkToken}\r\n        style={{ marginBottom: \"20px\" }}\r\n      >\r\n        Connect Bank Account\r\n      </Button>\r\n\r\n      {loading && <CircularProgress />}\r\n\r\n      {/* Display Income Data */}\r\n      {income.length > 0 && (\r\n        <Card style={{ marginTop: \"20px\", padding: \"20px\", backgroundColor: \"#e8f5e9\" }}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" style={{ fontWeight: \"bold\", color: \"#2E7D32\" }}>\r\n              Estimated Monthly Income\r\n            </Typography>\r\n            <List>\r\n              {income.map((incomeSource, index) => (\r\n                <ListItem key={index}>\r\n                  <ListItemText\r\n                    primary={incomeSource.source || \"Unknown Source\"}\r\n                    secondary={`Estimated Income: $${(incomeSource.avgMonthlyIncome || 0).toFixed(2)}`}\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Display grouped transactions */}\r\n      {Object.entries(groupedTransactions).map(([month, data]) => (\r\n        <Accordion key={month} style={{ marginTop: \"10px\", backgroundColor: \"#2e2e2e\", color: \"white\" }}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}>\r\n            <Typography variant=\"h6\" style={{ fontWeight: \"bold\", width: \"100%\" }}>\r\n              {month} <span style={{ float: \"right\" }}>${data.total.toFixed(2)}</span>\r\n            </Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Bank</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Name</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Price</TableCell>\r\n                    <TableCell style={{ color: \"white\", fontWeight: \"bold\" }}>Date</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {data.transactions.map((transaction) => (\r\n                    <TableRow key={transaction.transaction_id}>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.bank_name || \"N/A\"}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.name || \"Unknown Transaction\"}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>${(transaction.amount || 0).toFixed(2)}</TableCell>\r\n                      <TableCell style={{ color: \"white\" }}>{transaction.date ? new Date(transaction.date).toDateString() : \"Invalid Date\"}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlaidIntegration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}